@using EntityFX.EconomicsArcade.Contract.Common.Incrementors
@using EntityFX.EconomicsArcade.Presentation.Models
@model EntityFX.EconomicsArcade.Presentation.Models.GameDataModel

@{
    ViewBag.Title = "Home Page";
    var productionCounter = Model.Counters.Counters[1] as GenericCounterModel;
    var taxCounter = Model.Counters.Counters[2] as GenericCounterModel;
}

<div class="row">
    <div class="col-md-2">
    </div>
    <div class="col-md-8">
        <dl class="dl-horizontal">
            <dt>Баланс</dt>
            <dd>@Model.Counters.CurrentFunds.ToString("c")</dd>
            <dt>Всего заработано</dt>
            <dd>@Model.Counters.TotalFunds.ToString("c")</dd>
        </dl>
        <dl class="dl-horizontal">
            <dt>@Model.Counters.Counters[0].Name</dt>
            <dd class="text-danger">@Model.Counters.Counters[0].Value.ToString("F0")</dd>
            <dt>@productionCounter.Name</dt>
            <dd class="text-primary">@productionCounter.Value.ToString("c") = @productionCounter.SubValue.ToString("c") + Bonus: @(productionCounter.BonusPercentage)% (@productionCounter.Bonus.ToString("c")) - Buthurt: @productionCounter.Inflation%</dd>
            <dt>@taxCounter.Name</dt>
            <dd class="text-success">@taxCounter.Value.ToString("c") = @taxCounter.SubValue.ToString("c") + Premium: @(taxCounter.BonusPercentage)% (@taxCounter.Bonus.ToString("c")) - Fatigue: @taxCounter.Inflation%</dd>
        </dl>
    </div>
    <div class="col-md-2">
    </div>
</div>
<div class="row">
    <div class="col-md-12 text-center">
        @Html.ActionLink("Work Hard!", "PerformManualStep", null, new {@class= "btn btn-danger btn-lg"})
        @Html.ActionLink("Motivate!", "FightAgainstInflation", null, new {@class= "btn btn-warning"})
    </div>
</div>
<div class="row">
    <div class="col-md-1">
    </div>
    <div class="col-md-8">
        <div class="row">
            @foreach (var fundDriver in Model.FundsDrivers)
            {
                <div class="col-md-3">
                    <a class="thumbnail" href="@Url.Action("BuyFundDriver", new {id = fundDriver.Id})">
                        <div class="row">
                            <div class="col-md-4">
                                @{ var incIndex = 0;}
                                @foreach (var incrementor in fundDriver.Incrementors)
                                {
                                    <p class="@GetTextColor(incIndex)">
                                        +@incrementor.Value.Value @(incrementor.Value.IncrementorType == IncrementorTypeEnum.PercentageIncrementor ? "%" : "")
                                    </p>
                                    incIndex++;
                                }
                            </div>

                            <div class="col-md-4">
                                <span class="glyphicon glyphicon-check"></span>
                            </div>
                            <div class="col-md-4">
                                x @fundDriver.BuyCount
                            </div>
                        </div>
                        <div class="caption">
                            <strong>@fundDriver.Name</strong>
                            <div>@fundDriver.Value.ToString("c")</div>
                        </div>
                    </a>
                </div>
            }

        </div>
    </div>

    <div class="col-md-1">
    </div>
</div>

@functions
{

    string GetTextColor(int incrementorType)
    {
        switch (incrementorType)
        {
            case 0:
                return "text-danger";
            case 1:
                return "text-primary";
            case 2:
                return "text-success";
        }
        return "text";
    }

}
